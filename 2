Напиши приложение на python используя tkinter в качестве графического интерфейса в одном файле по ТЗ: Возможность добавления заявок в базу данных с указанием следующих параметров: Номер заявки; Дата добавления; Вид авто; Модель авто; Описание проблемы; ФИО клиента; Номер телефона; Статус заявки (новая заявка, в процессе ремонта, завершена). Возможность редактирования заявок: Изменение этапа выполнения (готова к выдаче, в процессе ремонта, ожидание автозапчастей); Изменение описания проблемы; Изменение ответственного за выполнение работ. Возможность отслеживания статуса заявки: Отображение списка заявок; Получение уведомлений о смене статуса заявки; Поиск заявки по номеру или по параметрам. Возможность назначения ответственных за выполнение работ: Добавление автомеханика к заявке; Отслеживание состояния работы и получение уведомлений о ее завершении; Автомеханик может добавлять комментарии на форме заявки и фиксировать информацию о заказанных автозапчастях и материалах.
import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from datetime import datetime

# Создание базы данных и таблиц
def create_db():
    conn = sqlite3.connect('auto_repair.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS requests (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 request_number TEXT,
                 date_added TEXT,
                 car_type TEXT,
                 car_model TEXT,
                 problem_description TEXT,
                 client_name TEXT,
                 phone_number TEXT,
                 status TEXT,
                 responsible TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS mechanics (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 name TEXT,
                 request_id INTEGER,
                 comments TEXT,
                 parts_ordered TEXT,
                 FOREIGN KEY(request_id) REFERENCES requests(id))''')
    conn.commit()
    conn.close()

# Функции для работы с базой данных
def add_request(data):
    conn = sqlite3.connect('auto_repair.db')
    c = conn.cursor()
    c.execute('''INSERT INTO requests (request_number, date_added, car_type, car_model, problem_description, client_name, phone_number, status, responsible)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''', data)
    conn.commit()
    conn.close()

def update_request_status(request_id, status):
    conn = sqlite3.connect('auto_repair.db')
    c = conn.cursor()
    c.execute('UPDATE requests SET status = ? WHERE id = ?', (status, request_id))
    conn.commit()
    conn.close()

def update_request_description(request_id, description):
    conn = sqlite3.connect('auto_repair.db')
    c = conn.cursor()
    c.execute('UPDATE requests SET problem_description = ? WHERE id = ?', (description, request_id))
    conn.commit()
    conn.close()

def assign_mechanic_to_request(mechanic_name, request_id):
    conn = sqlite3.connect('auto_repair.db')
    c = conn.cursor()
    c.execute('INSERT INTO mechanics (name, request_id) VALUES (?, ?)', (mechanic_name, request_id))
    conn.commit()
    conn.close()

def add_mechanic_comment(request_id, comment, parts):
    conn = sqlite3.connect('auto_repair.db')
    c = conn.cursor()
    c.execute('UPDATE mechanics SET comments = ?, parts_ordered = ? WHERE request_id = ?', (comment, parts, request_id))
    conn.commit()
    conn.close()

def search_requests(search_term):
    conn = sqlite3.connect('auto_repair.db')
    c = conn.cursor()
    c.execute('SELECT * FROM requests WHERE request_number LIKE ? OR car_type LIKE ? OR car_model LIKE ? OR client_name LIKE ?',
              ('%' + search_term + '%', '%' + search_term + '%', '%' + search_term + '%', '%' + search_term + '%'))
    results = c.fetchall()
    conn.close()
    return results

def get_all_requests():
    conn = sqlite3.connect('auto_repair.db')
    c = conn.cursor()
    c.execute('SELECT * FROM requests')
    results = c.fetchall()
    conn.close()
    return results

# Основное приложение
class AutoRepairApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Auto Repair Management")
        self.geometry("800x600")

        self.create_widgets()
        self.refresh_requests_list()

    def create_widgets(self):
        # Форма добавления заявки
        self.form_frame = ttk.LabelFrame(self, text="Add New Request")
        self.form_frame.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

        self.request_number_label = ttk.Label(self.form_frame, text="Request Number:")
        self.request_number_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
        self.request_number_entry = ttk.Entry(self.form_frame)
        self.request_number_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")

        self.car_type_label = ttk.Label(self.form_frame, text="Car Type:")
        self.car_type_label.grid(row=1, column=0, padx=5, pady=5, sticky="e")
        self.car_type_entry = ttk.Entry(self.form_frame)
        self.car_type_entry.grid(row=1, column=1, padx=5, pady=5, sticky="w")

        self.car_model_label = ttk.Label(self.form_frame, text="Car Model:")
        self.car_model_label.grid(row=2, column=0, padx=5, pady=5, sticky="e")
        self.car_model_entry = ttk.Entry(self.form_frame)
        self.car_model_entry.grid(row=2, column=1, padx=5, pady=5, sticky="w")

        self.problem_description_label = ttk.Label(self.form_frame, text="Problem Description:")
        self.problem_description_label.grid(row=3, column=0, padx=5, pady=5, sticky="e")
        self.problem_description_entry = ttk.Entry(self.form_frame)
        self.problem_description_entry.grid(row=3, column=1, padx=5, pady=5, sticky="w")

        self.client_name_label = ttk.Label(self.form_frame, text="Client Name:")
        self.client_name_label.grid(row=4, column=0, padx=5, pady=5, sticky="e")
        self.client_name_entry = ttk.Entry(self.form_frame)
        self.client_name_entry.grid(row=4, column=1, padx=5, pady=5, sticky="w")

        self.phone_number_label = ttk.Label(self.form_frame, text="Phone Number:")
        self.phone_number_label.grid(row=5, column=0, padx=5, pady=5, sticky="e")
        self.phone_number_entry = ttk.Entry(self.form_frame)
        self.phone_number_entry.grid(row=5, column=1, padx=5, pady=5, sticky="w")

        self.status_label = ttk.Label(self.form_frame, text="Status:")
        self.status_label.grid(row=6, column=0, padx=5, pady=5, sticky="e")
        self.status_combobox = ttk.Combobox(self.form_frame, values=["New Request", "In Progress", "Completed"])
        self.status_combobox.grid(row=6, column=1, padx=5, pady=5, sticky="w")
        self.status_combobox.current(0)

        self.responsible_label = ttk.Label(self.form_frame, text="Responsible:")
        self.responsible_label.grid(row=7, column=0, padx=5, pady=5, sticky="e")
        self.responsible_entry = ttk.Entry(self.form_frame)
        self.responsible_entry.grid(row=7, column=1, padx=5, pady=5, sticky="w")

        self.add_request_button = ttk.Button(self.form_frame, text="Add Request", command=self.add_request)
        self.add_request_button.grid(row=8, column=0, columnspan=2, padx=5, pady=5)

        # Форма для поиска заявок
        self.search_frame = ttk.LabelFrame(self, text="Search Requests")
        self.search_frame.grid(row=1, column=0, padx=10, pady=10, sticky="ew")

        self.search_label = ttk.Label(self.search_frame, text="Search:")
        self.search_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
        self.search_entry = ttk.Entry(self.search_frame)
        self.search_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")

        self.search_button = ttk.Button(self.search_frame, text="Search", command=self.search_requests)
        self.search_button.grid(row=0, column=2, padx=5, pady=5, sticky="w")

        # Список заявок
        self.requests_frame = ttk.LabelFrame(self, text="Requests List")
        self.requests_frame.grid(row=2, column=0, padx=10, pady=10, sticky="nsew")

        self.requests_tree = ttk.Treeview(self.requests_frame, columns=("ID", "Number", "Date", "Car Type", "Car Model", "Description", "Client", "Phone", "Status", "Responsible"), show="headings")
        self.requests_tree.heading("ID", text="ID")
        self.requests_tree.heading("Number", text="Number")
        self.requests_tree.heading("Date", text="Date Added")
        self.requests_tree.heading("Car Type", text="Car Type")
        self.requests_tree.heading("Car Model", text="Car Model")
        self.requests_tree.heading("Description", text="Problem Description")
        self.requests_tree.heading("Client", text="Client Name")
        self.requests_tree.heading("Phone", text="Phone Number")
        self.requests_tree.heading("Status", text="Status")
        self.requests_tree.heading("Responsible", text="Responsible")
        self.requests_tree.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

        self.requests_scrollbar = ttk.Scrollbar(self.requests_frame, orient="vertical", command=self.requests_tree.yview)
        self.requests_tree.configure(yscroll=self.requests_scrollbar.set)
        self.requests_scrollbar.grid(row=0, column=1, sticky="ns")

    def add_request(self):
        data = (
            self.request_number_entry.get(),
            datetime.now().strftime("%Y-%m-%d"),
            self.car_type_entry.get(),
            self.car_model_entry.get(),
            self.problem_description_entry.get(),
            self.client_name_entry.get(),
            self.phone_number_entry.get(),
            self.status_combobox.get(),
            self.responsible_entry.get()
        )
        add_request(data)
        self.refresh_requests_list()
        messagebox.showinfo("Success", "Request added successfully")

    def search_requests(self):
        search_term = self.search_entry.get()
        results = search_requests(search_term)
        self.update_requests_tree(results)

    def refresh_requests_list(self):
        requests = get_all_requests()
        self.update_requests_tree(requests)

    def update_requests_tree(self, requests):
        for item in self.requests_tree.get_children():
            self.requests_tree.delete(item)
        for request in requests:
            self.requests_tree.insert("", "end", values=request)

if __name__ == "__main__":
    create_db()
    app = AutoRepairApp()
    app.mainloop()
    
